{
  "posts": [
    {
      "content": "### 背景\r\n\r\n\r\n### ",
      "data": {
        "title": "采用分布式ID解决分库分表踩的坑",
        "date": "2020-10-16 10:55:39",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/ji-yi-ci-cai-yong-fen-bu-shi-id-jie-jue-fen-ku-fen-biao-cai-de-keng.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "ji-yi-ci-cai-yong-fen-bu-shi-id-jie-jue-fen-ku-fen-biao-cai-de-keng"
    },
    {
      "content": "## 背景\r\n在目前的SaaS系统中，业务开发者需要重点关注的一个问题就是数据隔离问题，这个是做SaaS系统必须要考虑的点，多租户数据隔离是每个SaaS系统都要遇到并且要解决的问题，笔者就分享下解决这种问题的思路、具体的解决方案以及优雅的解决思路。\r\n\r\n## 一、解决方案介绍\r\n### 目前业界数据隔离方案\r\n1、独立数据库，通过动态切换数据源来实现多租户\r\n2、共享数据库，隔离数据架构\r\n3、共享数据库，共享数据表，使用字段来区分不同租户，此方案成本最低\r\n\r\n以上方案从上到下，安全性逐渐降低。由于考虑到安全问题，故采用第一种方案解决数据隔离\r\n优点：\r\n1. 非常安全\r\n2. 数据互不影响，性能互不影响\r\n3. 数据迁移，数据扩展方便\r\n\r\n缺点：\r\n1. 需要维护大量的数据库\r\n2. 需要自行切换数据库，开发量多且实现复杂\r\n\r\n### 具体技术实现\r\n**简单的架构图**\r\n![](https://zhangyaoo.github.io/post-images/1603179800053.png)\r\n如图所示，SaaS项目大概架构图，关键点是应用层传参，以及路由层的实现。\r\n\r\n**实现**\r\n1、应用层：项目中应用service层是dubbo服务，而且项目分多层，这里需要考虑到多层服务场景下，如何优雅传参问题，如下图所示\r\n![](https://zhangyaoo.github.io/post-images/1603181882775.png)\r\n我们考虑到租户ID是唯一标识，和业务参数绑定在一起不优雅，所以两种参数分开处理，业务参数直接参数透传，租户ID唯一标识通过隐式传参来处理（参考dubbo http://dubbo.apache.org/zh-cn/docs/user/demos/attachment.html），并且参数记录到服务本地的threadlocal中，以便后续其他业务需要。具体实现如下：\r\n![](https://zhangyaoo.github.io/post-images/1603183675071.png)\r\n\r\n2、路由层：路由层实现主要是自行实现spring框架中DataSource接口，自定义dynamicDataSource类，然后implement DataSource接口，实现getConnection方法。然后重新定义SqlSessionFactory的bean，将自定义DataSource类属性注入。\r\n![](https://zhangyaoo.github.io/post-images/1603183148592.png)\r\n![](https://zhangyaoo.github.io/post-images/1603183156251.png)\r\n然后我们只需要关注getConnection方法根据租户ID，选择相对应的租户连接池就可以了。\r\n如图中，我们只需要实现这个selectTenantCodeDataSource()这个方法就可以了，这个方法实现很简单，这里就不贴图了。selectTenantCodeDataSource()方法主要就是从threadlocal中拿租户ID，然后去缓存池map中拿出连接池信息。\r\n![](https://zhangyaoo.github.io/post-images/1603183509071.png)\r\n其中，dataSourceCachePool是在初始化配置时候，将所有的租户连接池直接创建，然后扔到dataSourceCachePool。key是租户的ID，value是连接池信息。\r\n\r\n具体的初始化配置：\r\n```java\r\n/**\r\n * 初始化数据源\r\n */\r\n@Configuration\r\npublic class DataSourceInit {\r\n    \r\n    @PostConstruct\r\n    public void InitDataSource()  {\r\n        log.info(\"=====初始化数据源=====\");\r\n        TenantRoutingDataSource tenantRoutingDataSource = (TenantRoutingDataSource)ApplicationContextProvider.getBean(\"tenantRoutingDataSource\");\r\n        Map<String, DataSourceCache> dataSourceCachePool = new HashMap<>();\r\n\r\n        List<TenantInfo> tenantList = tenantInfoService.InitTenantInfo();\r\n        for (TenantInfo tenantInfo : tenantList) {\r\n            log.info(tenantInfo.toString());\r\n            HikariDataSource dataSource = new HikariDataSource();\r\n            dataSource.setDriverClassName(tenantInfo.getDatasourceDriver());\r\n            dataSource.setJdbcUrl(tenantInfo.getDatasourceUrl());\r\n            dataSource.setUsername(tenantInfo.getDatasourceUsername());\r\n            dataSource.setPassword(tenantInfo.getDatasourcePassword());\r\n            dataSource.setDataSourceProperties(master.getDataSourceProperties());\r\n            dataSourceCachePool.put(tenantInfo.getTenantId(), dataSource);\r\n        }\r\n        //设置数据源\r\n        tenantRoutingDataSource.setDataSources(dataSourceCachePool);\r\n    }\r\n}\r\n```\r\n\r\n## 二、方案的隐藏缺点以及解决\r\n### 隐藏的缺陷\r\n相信有一定开发经验的读者应该能想到，上述方案最大的缺点就是性能问题，对MySQL有非常大的影响。因为一开始初始化非常多的连接池，就会占用连接资源，比如租户从100个扩展到了1000个以及更多，那么连接池数量就线性增长，如果一个连接池保持15个活跃连接的话，那么连接数就是15*1000，此时如果MySQL的maxconntion的数量非常小，那么MySQL侧就会抛出”too many connctions“错误，在应用层方面就是MySQL不可用了。\r\n没优化之前的架构：\r\n![](https://zhangyaoo.github.io/post-images/1603190851131.png)\r\n### 解决\r\n想保持数据库分离，又要考虑到MySQL性能问题，只能向连接池优化的方向去考虑，其实可以减少数量就可以了，这里实现方案就是一个数据库实例一个连接池，如下图所示：\r\n![](https://zhangyaoo.github.io/post-images/1603190889253.png)\r\n具体实现就是将上述方案中的dataSourceCachePool的key改为 “IP+端口”，作为key。然后再数据源路由层，多一层映射（租户ID——>数据库实例）就可以了。\r\n\r\n## 三、更优雅方案解决企业内部开发痛点\r\n### 现状\r\n**现状**：企业内部项目组开发数据源路由，各个人员开发水平不一，各种路由方案实现不同，自己组内的开发的方案只能自己组内使用，并且实现复杂，耗人力物力。\r\n**目标**：项目组使用直接引入maven包，任何配置都不要配置（自定义的话需要自行在自己项目中配置属性），开箱即用。\r\n### 具体实现\r\n**原理**：直接采用springboot starter开发，将上述方案所有的逻辑和技术实现单独放入springboot starter工程中，采用外部配置的方式实现自定义配置。\r\n\r\n**开发者实现**：网上有许多springboot starter开发的流程和开发案例，笔者这里就只贴出关键的代码\r\n1、自动装配类：spring.factories中写入这个类DataSourceAutoConfigure，实现bean的自动装入，类里面主要是实现SqlSessionFactory和PlatformTransactionManager，然后在TenantRoutingDataSource的getconnection方法中自定义实现路由逻辑。\r\n```java\r\n@Configuration\r\npublic class DataSourceAutoConfigure {\r\n\r\n    @Resource\r\n    private TenantRoutingDataSource tenantRoutingDataSource;\r\n\r\n    @Bean\r\n    @ConditionalOnMissingBean(SqlSessionFactory.class)\r\n    @ConditionalOnBean(TenantRoutingDataSource.class)\r\n    public SqlSessionFactory sqlSessionFactory() throws Exception{\r\n        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();\r\n        sqlSessionFactoryBean.setDataSource(tenantRoutingDataSource);\r\n        Objects.requireNonNull(sqlSessionFactoryBean.getObject()).getConfiguration().setMapUnderscoreToCamelCase(true);\r\n        return sqlSessionFactoryBean.getObject();\r\n    }\r\n\r\n    @Bean\r\n    @ConditionalOnMissingBean(PlatformTransactionManager.class)\r\n    @ConditionalOnBean(TenantRoutingDataSource.class)\r\n    public PlatformTransactionManager platformTransactionManager() {\r\n        return new DataSourceTransactionManager(tenantRoutingDataSource);\r\n    }\r\n}\r\n```\r\n2、dubbo filter扩展接口：获取租户ID，并且需要加@Activate注解，这样dubbo在初始化filter链的时候，自动将这个filter注册到filter链中，这样做的好处就是，用户在自己工程中不需要配置filter这个参数，无需增加任何的配置。\r\n```java\r\n@Activate(group = {\"provider\"})\r\npublic class TenantCodeContextFilter implements Filter {\r\n    @Override\r\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\r\n        String tenantCode = RpcContext.getContext().getAttachment(\"tenantCode\");\r\n        TenantCodeContextHolder.setTenantCode(tenantCode);\r\n        return invoker.invoke(invocation);\r\n    }\r\n}\r\n```\r\n3、检查用户侧自定义配置是否正确：检查用户的配置是否合理，不合理的话再容器就绪阶段就会抛出异常\r\n```java\r\n@Component\r\npublic class CheckConfigListener implements ApplicationListener<ApplicationReadyEvent> {\r\n\r\n    @Override\r\n    public void onApplicationEvent(ApplicationReadyEvent applicationReadyEvent) {\r\n        ConfigurableApplicationContext applicationContext = applicationReadyEvent.getApplicationContext();\r\n        ConfigurableEnvironment environment = applicationContext.getEnvironment();\r\n        // 检查用户自定义配置是否正确，自行实现\r\n        checkDatasourceConfig(environment);\r\n    }\r\n}\r\n```\r\n**用户使用**：直接引入相应的maven，方便快捷\r\n\r\n\r\n## 四、TODO后续优化\r\n1. 目前多租户数据源通用工程只支持Dubbo的调用，未来可扩展支持多种协议如HTTP、gRPC\r\n2. 目前只支持Hikari数据源，后续支持多种数据源类型，比如Durid\r\n3. 如果租户数据非常大，可以考虑空间换时间思想，使用缓存存放租户的数据源配置，提升查询效率。\r\n\r\n\r\n## 参考\r\n- SaaS系统数据隔离方案——https://blog.arkency.com/comparison-of-approaches-to-multitenancy-in-rails-apps/",
      "data": {
        "title": "Saas系统多数据源路由优雅解决方案",
        "date": "2020-10-16 10:26:30",
        "tags": [
          "SaaS"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/saas-xi-tong-duo-shu-ju-yuan-lu-you-you-ya-jie-jue-fang-an.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "saas-xi-tong-duo-shu-ju-yuan-lu-you-you-ya-jie-jue-fang-an"
    },
    {
      "content": "## 前言\r\n> 在对MySQL开发中，联合索引是很常见的一种MySQL优化方式，本文解释了联合索引的存储以及查找过程，可以了解一下底层的原理以及加深对MySQL联合索引的理解。\r\n\r\n\r\n## Innodb B+树\r\n先看一下Innodb B+树的主键索引和辅助索引。这里直接拿张洋大神的图：\r\n- 聚簇索引:\r\n![](https://zhangyaoo.github.io/post-images/1593425796639.png)\r\n- 辅助非聚簇索引:\r\n![](https://zhangyaoo.github.io/post-images/1593425801180.png)\r\n**结构**：当一个表T（id,name,age,sex,high）建一个普通索引  KEY(name)，name的索引结果就和上面辅助非聚簇索引结构一样。\r\n**查询**：当有一个select id,name,age from T where name = \"\" 辅助索引会根据name在B+树上进行二叉树查找，找出叶子节点数据后发现没有age这个数据，就会进行**回表**操作到主键聚簇索引去查找，拿到聚簇索引叶子节点的age数据。\r\n\r\n\r\n## 联合索引存储以及寻址\r\n- **索引结构**：我们知道上述回表过程也会消耗性能，相当于多查一次，所以系统可以根据业务情况加上一个组合索引，当然并不是一直加组合索引就可以了，因为要考虑到索引存储空间的问题。例如给上述加上一个组合索引  KEY（name,age,sex）【 KEY（col1,col2,col3）】。那么这个组合索引的B+树非叶子节点数据结构和上述辅助非聚簇索引图一样，但是叶子节点是这样的：\r\n![](https://zhangyaoo.github.io/post-images/1593425790647.png)\r\n叶子节点存储col1,col2,col3这三列数据以及加上ID这一列数据。\r\n\r\n- **寻址过程：**\r\n例如语句：select id,name,age from T where name = \"张三\" and age=25，先根据name字段从辅助聚簇索引定位到哪一个叶子节点数据中，然后根据age节点在上述表格的前6行中，寻找age= 25的数据，然后找出所有符合的数据以及其对应的ID，然后根据ID来进行回表操作查询。这里返回了三条数据，就回了三次表。\r\n上述回表过程中，笔者引入一个**索引下推**的一个功能，索引下推是MySQL在5.6版本后引入的一个查询优化。就拿上述的例子，在没有优化之前，据name字段查询“张三”后，会拿到6条结果，回表6次，然后从主键索引拿到6条数据后，根据age字段筛选数据；优化之后，先再辅助索引上面根据name字段和age字段筛选符合数据，也就是ID，然后再回表，这里回表了三次。\r\n\r\n- **组合索引注意事项**\r\n当然，联合索引的最重要的是注意联合索引的使用问题，要遵循最左匹配原则，才可以优化到整个SQL了。\r\n\r\n\r\n### 总结\r\n以上，总结了MySQL的索引的基本原理，以及联合索引的存储和寻址过程，并且引入索引下推概念，还有使用联合索引的注意事项。\r\n\r\n\r\n\r\n## 参考\r\n- MySQL索引背后的数据结构及算法原理——http://blog.codinglabs.org/articles/theory-of-mysql-index.html。\r\n",
      "data": {
        "title": "MySQL联合索引在B+树的存储和查找",
        "date": "2020-06-29 17:32:43",
        "tags": [
          "MySQL"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/mysql-lian-he-suo-yin-zai-bshu-de-cun-chu-he-cha-zhao.jfif",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "mysql-lian-he-suo-yin-zai-bshu-de-cun-chu-he-cha-zhao"
    },
    {
      "content": "\r\n### 前言\r\n>   Zookeeper作为微服务分布式协调中间件，了解它的原理以及日常开发中的注意事项和可能会出现的问题是有必要的。\r\n\r\n### 前置知识：ZAB协议\r\nZAB：Zookeeper Atomic Broadcast（ZAB）崩坏恢复和原子广播协议\r\n1）崩坏恢复：在master节点宕机情况下，其他集群节点会重新选举master节点，快速领导者选举机制：选举规则会参照最大的分代年龄epoch>最大的事务zxid>server id来进行选举，选举过程就是将自己节点投票信息发给其他集群节点，投票信息附带zxid和serverid，**判断是否超过一半的投票选同一个节点**，那么这个节点就会选举为master。\r\n2）选举完后，就会进行数据同步，将master节点数据同步到slave中，此时对外服务不可用。\r\n3）原子广播：ZAB协议保证消息的一致性和有序性\r\n&emsp;一致性：leader发送propasal事务请求（包含zxid），master判断过半机制ack，就认为事务可以提交了，master会提交事务，然后广播提交事务消息，从节点开始提交本事务。一半ack机制，可以看zookeeper是CP，但是不是强一致性；从节点接收propasal后，会将事务写入磁盘。\r\n&emsp;有序性：zxid事务id保证全局有序性，每一个slave服务器维持一个FIFO队列，维持局部有序性。\r\n\r\n### Zookeeper脑裂\r\n&emsp;Zookeeper脑裂都是出现在集群环境中的。指的是一个集群环境中出现了多个master节点，导致严重数据同步和写入问题，数据不一致等等，如果这种情况出现在线上分布式环境下，会导致服务不可用。\r\n\r\n### 出现原因\r\n&emsp;可能就是网络环境有问题导致节点之间断开，或者节点假死等等，导致一部分slave节点会重新进入崩坏恢复模式，重新选举新的master节点，然后对外提供事务服务。由于心跳超时（网络原因导致的）认为旧的master死了，但其实旧的master还存活着。\r\n\r\n### 如何解决脑裂\r\n过半机制，如果集群中某个节点的投票数量大于集群有效节点的一半，就会选出master。这里拿出关键代码：\r\n```java\r\n// 验证是否符合过半机制，如果符合就会选举新的master节点\r\npublic boolean containsQuorum(Set<Long> set){\r\n    // half是在构造方法里赋值的\r\n    // n表示集群中zkServer的个数（准确的说是参与者的个数，参与者不包括观察者节点）\r\n    half = n/2;\r\n    // set.size()表示某台zkServer获得的票数\r\n    return (set.size() > half);\r\n}\r\n```\r\n\r\n\r\n笔者介绍几种情况，来说明一下几种脑裂的场景\r\n- 比如集群中有6个节点，一个master和5个slave，分两个机房，每个机房分别三台，发生了机房不可通信的情况，如下图：\r\n![](https://zhangyaoo.github.io/post-images/1593419532309.png)\r\n然后机房B就会产生新的master，如图\r\n![](https://zhangyaoo.github.io/post-images/1593419550068.png)\r\n这个时候Zookeeper为了防止这样的情况发生，利用了**过半机制**的这个特性。\r\n上图中，机房B节点为3 小于集群数量的一半，所以，最终上面图中机房B是不会选举出新的master节点的。\r\n\r\n\r\n- 我们再来看一种情况：比如集群中有5个节点，一个master和4个slave，分两个机房，如下图：\r\n![](https://zhangyaoo.github.io/post-images/1593419973725.png)\r\n如果发生了机房不能通信的情况，那么机房B因为节点是2个，没有超过一半，就不会产生出新的master节点了。\r\n\r\n- 再来看最后一种情况，比如集群中有5个节点，一个master和4个slave，分两个机房，不同的是master节点在机房B，如下图：\r\n![](https://zhangyaoo.github.io/post-images/1593420189914.png)\r\n如果发生了机房不能通信的情况，那么机房A节点是3个，超过了一半，就会进入崩坏恢复模式产生新的master节点，那么此时集群中就会出现两个master节点了。如下图所示\r\n![](https://zhangyaoo.github.io/post-images/1593420219104.png)\r\n那么遇到这种情况Zookeeper是如何处理的？答：旧的leader所有的写请求同步到其他followers节点是会被拒绝的。因为每当新leader产生时，会生成一个epoch，这个epoch是递增的，followers如果确认了新的leader存在，知道其epoch，就会拒绝epoch小于现任leader epoch的所有请求。这个时候旧的master进入恢复模式进行数据同步。\r\n所以按照上面的情况，机房A的所有followers节点正常通信，机房B的所有节点重新进入恢复模式进行数据同步。\r\n\r\n总结：通过Quorums机制来防止脑裂，当leader挂掉之后，可以重新选举出新的leader节点使整个集群达成一致；当出现假死现象时，通过epoch大小来拒绝旧的leader发起的请求，当出现这种情况，旧的leader 进入恢复模式进行数据同步。\r\n\r\n### 引出奇数节点\r\n&emsp;知晓以上场景后，我们知道，2台机器也能选举出master，只不过只要有1个死了zookeeper就不能用了，因为1没有过半。所以2个zookeeper的死亡容忍度为0。同理，要是有3个zookeeper，一个死了，还剩下2个正常的，过半了，所以3个zookeeper的容忍度为1。如果按照这样的机制推理，那么得出2->0;3->1;4->1;5->2;6->2  左边是数量，右边是容忍度，所以2n和2n-1的容忍度是一样的，所以可以得出，集群是**奇数个能够节省资源**。\r\n\r\n<!--下面的奇数节点的作用需要确认 TODO-->\r\n[comment]: <> (&emsp;我们再来看一下奇数节点其他作用，举个例子：\r\n&emsp;3个集群节点，分裂为1个和2个，2个也能选举出master，提供服务。\r\n&emsp;4个集群节点，分裂为1个和3个，3个也能选举出master，提供服务；如果分裂为2个和2个，那么因为过半 机制都不能选举master，无法提供服务。\r\n&emsp;5个集群节点，分裂为2个和3个，3个也能选举出master，提供服务；如果分裂为1个和4个，4个过半，所以能够能选举master，提供服务。\r\n&emsp;6个集群节点，分裂为2个和4个，4个过半，所以能够能选举master，提供服务；分裂为3个和3个，3个没有过半，不能选举master，无法提供服务。\r\n&emsp;所以可以得出，在节点数量是**奇数个的情况下， zookeeper集群总能对外提供服务**（即使损失了一部分节点）；如果节点数量是偶数个，会存在zookeeper集群不能用的可能性。) \r\n\r\n\r\n### 总结\r\n以上，笔者总结了ZAB协议，到Zookeeper防止脑裂的场景以及如何处理，以及结合例子，Zookeeper集群在奇数节点下的作用。\r\n\r\n### 参考\r\n- ZooKeeper集群的脑裂问题——https://www.cnblogs.com/shoufeng/p/10591526.html",
      "data": {
        "title": "关于Zookeeper奇数节点以及脑裂问题",
        "date": "2020-06-22 10:32:00",
        "tags": [
          "Zookeeper"
        ],
        "published": true,
        "hideInList": false,
        "feature": "https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1592811337092&di=b86df765f237ce34cfd929956a8cabbf&imgtype=0&src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D459364542%2C3768678537%26fm%3D214%26gp%3D0.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "guan-yu-zookeeper-qi-shu-jie-dian-yi-ji-nao-lie-wen-ti"
    },
    {
      "content": "## 前言\r\n> 随着分布式服务架构的流行与普及，原来在单体应用中执行的多个逻辑操作，现在被拆分成了多个服务之间的远程调用。微服务化后，随着带来的服务之间的分布式事务问题，尤其是在金融业务下，分布式事务是保证数据一致性的重要保证。本文着重会讲分布式事务场景和业界主流的解决方案。\r\n\r\n## 一、引入\r\n&emsp;资金转账在金融业务下是一个非常重要而且常见的场景，如果因为技术问题导致资金转账错误，导致数据不一致问题，那么就会造成无法预测的后果。\r\n&emsp;笔者这里拿银行转账的例子来说（这里的转账有很多场景比如银行卡之间充值提现、银行账户之间的转账等等），比如甲银行账户A向乙银行账户B转账1W：\r\n\r\n同步调用：\r\n1. A银行对转出账户执行检查校验，进行账户金额扣减。\r\n2. A银行同步调用B银行转账接口。\r\n3. B银行对转入账户进行检查校验，进行账户金额增加。\r\n4. B银行返回处理结果给A银行。\r\n  ![](https://zhangyaoo.github.io/post-images/1593745125729.png)\r\n同步调用问题：\r\n*  如果B银行因为网络原因导致接口不通，那么A调用线程会长时间阻塞。\r\n*  如果A扣减后，发送请求后，在网络中丢失了，B银行没有收到请求，导致账户A扣减了，账户B没有加\r\n* 如果账户B扣减成功了，由于某种原因比如网络异常没有及时回调给甲银行，那么账户A就认为是异常请求，则会回滚事务，导致数据不一致。\r\n\r\n再来看一下异步调用：\r\n1. A银行对转出账户执行检查校验，进行账户金额扣减。\r\n2. 主线程将请求数据异步写入队列MQ\r\n3. 真正消费者程序对B银行进行远程调用\r\n4. B银行对转入账户进行检查校验，进行账户金额增加。\r\n5. B银行返回处理结果给A银行。\r\n![](https://zhangyaoo.github.io/post-images/1593743096206.png)\r\n异步调用问题：\r\n* 如果账户A扣减本地事务成功了，但是消息发出后，因为网络原因或者其他宕机原因，导致消息未发送成功，没有进行B账户远程调用，导致本地事务和消息不一致性。\r\n* MQ消费端程序如果消费消息成功，请求银行成功了，但是回传ACK给MQ失败了，那么回导致消费端程序重复消费问题，那么就会出现重复转账的问题。\r\n* 在B账户因为某些原因导致账户增加失败，在回调A银行接口通知回滚时网络异常或者宕机，会导致A银行转账无法完成回滚，从而导致数据不一致。\r\n\r\n异步调用解决了同步调用的主线程阻塞问题，但还是没有解决数据一致性问题。而且引入MQ中间后，还要考虑到本地事务和MQ消息一致性问题，还有其他的引入后的维护工作，比如消息丢失，消息重发等等问题。\r\n\r\n## 二、分布式事务解决方案\r\n&emsp;讲到了分布式事务，自然离不开分布式系统的一些基本原则和定理：CAP原则和BASE理论，相信读者应该都知道，这里不做过多阐述。业界根据这些规则和理论，衍生出了各种分布式事务解决方案：XA规范，2PC，3PC，本地消息表方案，基于消息中间件的最终一致性方案，TCC方案，阿里的SEATA，SAGA方案和最大努力通知等等。\r\n&emsp;以上每个方案都有自己的应用场景，就拿2PC来说，MySQL的事务型日志redolog二段提交（redolog(prepare)--》binlog--》redolog(commit)）保证binlog和redolog数据一致性，Zookeeper的proposal事务二段提交（半数以上ack返回成功表示写入数据成功）保证leader和foller的数据一致性，这些都是2PC的应用。\r\n&emsp;金融场景下类似资金业务需要保证最终一致性解决分布式事务，不需要保证转账实时性。所以本地消息表、基于MQ中间件的最终一致性等柔性方案是首选的方案。这些基于消息的分布式事务，本质上就是，本地事务+从事务，从事务从消息中获取信息进行本地提交，这里保持**异步事务机制、只能保证最终一致性**。\r\n\r\n\r\n### 2.1 本地消息表解决一致性问题\r\n&emsp;一般来说，跨行转账的原理，会存在一个中国人民银行的中间人角色来操作转账，但不在本次讨论的范围内。\r\n&emsp;业界银行转账大部分都是同步转账，异步获取转账结果，包括第三方支付平台对接银行都是这样玩的。这里笔者就利用本地消息表思想来具体叙述数据一致性是如何保证的，老规矩先放图：\r\n![](https://zhangyaoo.github.io/post-images/1603274563955.png)\r\n其中交易记录表大概长这个样子：\r\n|  字段   | 描述  |\r\n|  :----:  | :----:  |\r\n| id  | 自增ID，没有业务意义 |\r\n| trade_order_num | 交易订单号，作为转账记录唯一标识 |\r\n| source_account_num | 交易转出方账户ID |\r\n| target_account_num | 交易收款方账户ID |\r\n| status | 状态机，0=预创建，1=转账中，2=转账成功，3=转账失败 |\r\n| create_time | 记录创建时间，可作为窗口时间内判断标准 |\r\n| update_time | 更新时间，可追溯转账记录更新成功时间 |\r\n账户表大概长这个样子：\r\n|  字段   | 描述  |\r\n|  :----:  | :----:  |\r\n| id  | 自增ID，没有业务意义 |\r\n| account_num | 账户ID |\r\n| current_amt | 当前账户余额 |\r\n| lock_amt | 冻结金额，用来记录临时状态的核心转账数据 。真实余额=current_amt-lock_amt |\r\n\r\n图中的步骤大致分为10步，分别是：\r\n1. \r\n\r\n### 2.2 事务消息解决本地事务和MQ消息一致性问题\r\n\r\n#### 2.2.1 消费端重复消费\r\n#### 2.2.2 消费端消费失败\r\n\r\n\r\n\r\n\r\n### 2.3 其他问题\r\n#### 2.3.1 银行交易冲正\r\n\r\n## 三、 其他方式保证数据一致性\r\n&emsp;当然，保持数据一致性不光是分布式事务来保证，业务上还要配合其他的辅助来保证，这里笔者就列举几种\r\n1. 全链路幂等\r\n   全链路幂等保证不产生脏数据，保护核心流程正常执行。\r\n2. 业务对账\r\n   业务内部准实时对账，比如业务发生后充值提现，对比用户余额是否正确，用户业务流水是否正确。\r\n   T+1日对账，程序或者人工定时扫描核心业务数据，保证当日数据准确。对账后自动检测并且修复重试业务\r\n3. 业务指标监控\r\n   监控数据库中的订单预占资金没有释放，状态机是不是最终态监控，单位窗口时间内业务状态是否异常，账户中的预扣减金额是否释放，业务重试次数是否超过阈值等等业务监控。\r\n   \r\n\r\n## 四、总结\r\n&emsp;分布式场景，要用分布式的思维去思考问题。要考虑任何的超时，断电，维护不同物理存储的数据的可能存在的状态不一致的场景，说白了要面向失败编程。\r\n\r\n## 五、参考\r\n- 有赞出金系统——https://tech.youzan.com/build-a-withdraw-sys/\r\n- 分布式事务的思考——https://www.cnblogs.com/sujing/p/11006424.html",
      "data": {
        "title": "金融级业务下分布式事务保证数据一致性",
        "date": "2020-06-22 10:27:01",
        "tags": [
          "分布式事务"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/jin-rong-ji-ye-wu-xia-fen-bu-shi-shi-wu-bao-zheng-shu-ju-yi-zhi-xing.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "jin-rong-ji-ye-wu-xia-fen-bu-shi-shi-wu-bao-zheng-shu-ju-yi-zhi-xing"
    },
    {
      "content": "#### 题目描述\r\n给定一个32位整数 . 输出二进制表示反转后的值.\r\n例如 input 43261596（二进制 00000010100101000001111010011100）\r\n返回 output 964176192（二进制 00111001011110000010100101000000）\r\n\r\n目前笔者就想到了时间复杂度在O(N)的解决思路：\r\n1. 循环判断输入数据的低位是0还是1，具体判断方法是和1进行与操作\r\n2. 如果判断是，返回的结果+1，不是1那么不做任何处理\r\n3. 每次循环，input的数据向左移一位，output数据向右移动一位\r\n4. 循环32次，返回结果\r\n   \r\n```java\r\n/**\r\n    *  二进制数据反转\r\n    */\r\npublic class BitReverse {\r\n\r\n    public static int reverse(int n) {\r\n        int result = 0;\r\n        for (int i = 0; i < 32; i++) {\r\n            result = result << 1;\r\n            if ((n & 1) == 1) {\r\n                result++;\r\n            }\r\n            n = n >> 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static void main(String[] args){\r\n        System.out.println(reverse(1<<30));\r\n        System.out.println(1<<30);\r\n    }\r\n}\r\n```\r\n\r\n",
      "data": {
        "title": "O(N)时间复杂度下，二进制反转",
        "date": "2020-06-19 16:11:36",
        "tags": [
          "数据结构和算法"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/er-jin-zhi-fan-zhuan.jfif",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "er-jin-zhi-fan-zhuan"
    },
    {
      "content": "\r\n### 前言\r\n>   对于任何系统，都会存在系统性能瓶颈，这里笔者作为一名Java工程师列出了自己在工作中的优化思路，仅供参考。\r\n\r\n  \r\n\r\n## 一、系统性能预测\r\n&emsp;任何一个系统都是从0到1慢慢发展的，当系统业务随着时间的推移，业务量和流量随之增大，系统性能就随着凸显出来。这个时候，开发人员和架构师要从架构层面、代码层面、产品业务层面等一一去演进业务系统来维持高流量下系统稳定性。\r\n\r\n&emsp;现在服务都是微服务部署开发，如果要模拟服务压测的话要在本地开启相同的服务，前提是机器配置是一样的。而且需要将线上的持久化数据同样copy到本地数据库中，这样才能真正模拟线上的环境。拿单台机器进行压测，压测的对象可以是某个核心的接口或者业务模块（这个接口可以是日志服务中统计的访问量比较高的具体的接口API），压测的指标可以是吞吐量，平均响应时间，最大响应时间，TPS，QPS等等。\r\n\r\n&emsp;通过性能指标可以度量目前存在的性能问题，同时作为性能优化的评估依据。具体的指标主要是要分析系统的QPS、TPS、平均响应时间以及最大响应时间，我们预测一个单体的应用能够承受多少的并发量，看这这些指标是否能够达到我们预期的值，比如作为一个健康的系统，最大响应时间不超过1s。后面进行压测时候，观察流量巅峰时刻观察系统的运行情况。以下就性能分析优化展开总结。\r\n<br>\r\n\r\n## 二、系统性能分析优化\r\n### 1、硬件方面：\r\n##### CPU：\r\n &emsp;在压测的时候观察CPU的占用情况，是否长期处于100%状态，正常来说80%以下是正常的。如果非常低，那么说明系统不是在做IO密集型运算动作，性能瓶颈是在其他方面，不是在CPU上面，具体的操作方法可以用top命令查看。\r\n &emsp;以笔者经验来看，一般CPU飙高的原因无非三种：\r\n 1. 第一种就是代码中存在死循环，并且循环中有大量的CPU计算操作；\r\n 2. 第二种就是多线程并发下，竞争相同的资源导致大量线程获取不到资源，如果此时线程进行自旋操作，不释放CPU资源，那就导致CPU飙升；\r\n 3. 第三种就是代码中有内存泄漏，导致内存一直处于阈值状态，GC线程会持续GC，导致CPU飙高。\r\n   \r\n &emsp;上面三种情况中第二种和第三种情况在日常开发工作中会遇到，对于第二种情况对于自旋锁情况，一般会用CAS乐观锁去实现，并且设置一定的超时时间和重试次数，然后返回失败或者进入阻塞队列释放CPU分片，防止线程一直占用CPU资源。\r\n &emsp;对于第三种情况，就是代码的BUG，开发过程中要注意泄漏的问题，就比如多线程操作链表，如果没有做同步的锁，那么很有可能导致链表的引用指针混乱，引起内存泄漏。\r\n &emsp;以上，如果我们开发工作中避免了上述几种情况，CPU就能够发挥它应该有的能力，提升系统性能。同时，开发人员做好硬件CPU监控是非常有必要的。\r\n##### 内存：\r\n  &emsp; 在Java中，内存JVM是一个很重要的指标，这个关乎到系统是否可以稳定运行。我们可以借助三方工具可以查看系统的JVM内存的运行情况，笔者提供几个通用的预测内存的运行情况的思路：\r\n    - 每秒占用多少内存？\r\n    - 多长时间触发一次Minor GC？\r\n    - 多长时间触发一次Major GC？\r\n    - Minor  GC耗时多久？Major  GC耗时多久？\r\n    - 会不会频繁因为Survivor放不下导致对象进入老年代？\r\n    \r\n在日常开发中，开发人员需要关注的就是，判断系统JVM是否有频繁FULL GC和频繁YOUNG GC，如果有，那么会严重影响系统性能。笔者就这两个方面去分析一下\r\n &emsp;&emsp; 1、**频繁FULL GC** ：首先我们应该要了解到频繁FULL GC危害，一般的中大型系统，系统的JVM会设置很大，比如会给堆内存分配4~8G的空间，因为遍历对象图的过程中堆越大，遍历时间就会长，而且如果垃圾越多，垃圾回收也会拉长整个GC的时间，这就导致每一次FULL GC会有长时间的STW，影响系统稳定性。然后我们要清楚导致触发Full GC的场景，这里列出了可能会导致的几个场景：\r\n&emsp;&emsp;1）大对象\r\n&emsp;&emsp;2）方法区meta space空间占满\r\n&emsp;&emsp;3）年轻代的存活的生命周期长对象一直汇入老年代，导致GC\r\n&emsp;&emsp;4）内存泄漏导致空间不足进而GC\r\n这里笔者就拿内存泄漏（内存泄漏指的是有引用无法被回收但是没有用的对象持续增长）来说，一般如果有内存泄漏。大概的内存监控图长这个样子![](https://zhangyaoo.github.io/post-images/1592463486063.png)\r\n这样导致的后果就是，频繁的FULL GC，最后内存一直持续增长到爆满，然后FULL GC执行间隔缩短，最终会导致GC线程持续GC，CPU使用率会直线飙升，导致系统瘫痪。\r\n &emsp;&emsp;  2、 **频繁 YOUNG GC**  ：YOUNG GC如果过于频繁的话，一般是短周期小对象较多，这时候可以从 Eden 区/新生代设置的太小了这个方面考虑，看能否通过调整-Xmn、-XX:SurvivorRatio 等参数设置来解决问题\r\n  \r\n\r\n  **这里笔者以自己开发经验，提供一些“简单的”JVM优化拙见**：\r\n1. 尽量将新生代的垃圾回收掉，不让存活对象进入老年代，因为老年代的GC代价比年轻代高，这里可以设置分代年龄-XX:MaxTenuringThreshold=XX\r\n&emsp; 例子1：比如说业务上一分钟产生几百兆的数据，而且需要存活一分钟，如果一分钟YGC的次数少于默认分代年龄，那么对象会进去老年代引发FGC，FGC会引起更大的停顿时间\r\n&emsp; 例子2：如果说对象都是一些短期对象，那么可以设置分代年龄更小，因为长期对象肯定是大对象或者单例对象永驻内存的，这样可以腾出空间给新生代GC，避免新生代频繁GC\r\n2. 增加新生代内存的大小，防止导致频繁的minor GC，这样老年代的Major GC频率也会降低\r\n3. 尽量将大内存的服务，拆分成几个相同服务，也就是多实例部署，分散堆内存资源，避免堆大内存导致GC时间过长（这个和G1分区回收思想相似）\r\n4. 每个线程占用的内存不应过大或者过小，不然会导致OOM\r\n&emsp; 如果线程内存过小，会导致线程里面的栈内存小，临时变量如果超出这个阈值就会无法分配栈，导致栈溢出，出现stackoverflow\r\n&emsp; 如果线程内存过大，在多线程并发下，如果线程数量过多，会占用非常多JVM内存，有内存溢出的风险\r\n5. 合理设置垃圾回收器，在大内存或者在内存碎片化环境下，G1垃圾回收器会有很好的效果\r\n&emsp; G1垃圾回收器是Java9默认回收器，G1能够在指定的停顿时间内，根据每个region的回收价值，选择可以去回收的region，并且存活对象移动复制是多线程进行的。这里要注意如果设置停顿时间的话，不能设置太小，因为太小会导致每次进行回收的region太少，导致垃圾回收速度更不上垃圾生产的速度，这样随着时间推移，系统垃圾对象会越来越多，占满JVM\r\n6. 对象生命周期的分布情况：如果应用存在大量的短期对象，应该适当增大年轻代 -Xmn；如果存在相对较多的持久对象，老年代应该适当增大。-Xms -Xmx\r\n7. Xms和Xmx也设置为相同，这样可以减少内存自动扩容和收缩带来的性能损失\r\n8. 设置大对象对象的大小，一般系统中大对象大部分都是一些系统的缓存，像这些对象尽早让它们的进入老年代，避免占用新生代的空间。\r\n\r\n以上，合理分配JVM内存资源以及做好系统内存的监控机制是我们系统稳定性运行的保障。\r\n\r\n##### 网络负载和IO\r\n来一张IO发生场景图片：\r\n![](https://zhangyaoo.github.io/post-images/1593333928024.png)\r\n&emsp;对于磁盘IO，我们可以用Linux下的iostat命令去查看当前IO负载的情况，比如r_wait和w_wait指标，这些指标较大则说明I/O负载较大，I/O等待比较严重，磁盘读写遇到瓶颈。这个时候我们要看压测的接口是否有文件读取和写入的操作，如果有说明接口性能瓶颈在于文件读写，这个时候可以利用文件buffer缓存API等功能进行优化，或者可以用异步的方式进行文件读写。\r\n&emsp;笔者在开发中就遇到因为IO问题带来的线程资源耗尽的线上问题：我们系统业务在借贷业务成功后，要生成借款协议，协议是一个PDF文件，当时主业务逻辑完成后同步调用生成PDF的逻辑，因为当时大流量并发，导致整个借贷业务性能瓶颈就在磁盘IO上，CPU处于空闲状态，借用网上的一个图，TOP命令可以看出IO花费的时间在76.6%，后面优化后就多线程异步处理。\r\n![](https://zhangyaoo.github.io/post-images/1593334249512.webp)\r\n\r\n&emsp;对于网络负载，因为网络负载或者网络堵塞是不受控制的，这个涉及到底层的TCP通信的优化（比如利用滑动窗口和拥塞控制），这个就不展开讨论。工程师可控范围可以是选择IO读写高效率的中间件，比如redis、tomcat、activeMq、nginx、dubbo、netty等，这些中间件的底层IO模型的是多路复用IO，多路复用IO指的是一个IO线程能够服务于多个socket连接，线程监听每个连接的资源描述符。如下图所示：![](https://zhangyaoo.github.io/post-images/1593334346151.png)\r\n\r\n&emsp;分布式微服务环境下，服务之间的RPC同步调用会非常频繁，随之服务之间的网络负载会影响到整个系统的服务性能，因此，每个服务的机器放置到同一个局域网下性能效果会很好。而且，对于服务之间的调用，最好利用自研或者第三方中间件去监控服务链路调用的整体情况（比如Zipkin或者SkyWalking ）,并且要合理设置服务与服务之间的超时时间，避免因为网络原因导致服务线程池耗尽，导致OOM。\r\n\r\n\r\n###  2、中间件层\r\n&emsp; 这里中间件，泛指数据存储层，以笔者经验来看，大多数系统性能问题和瓶颈都是与数据存储相关，这里笔者就拿这方面展开讨论总结。\r\n##### MySQL\r\n一般来说MySQL在很多线程更新同一行的场景下，TPS性能曲线如图所示，参考丁奇的《秒杀场景下MySQL的低效》\r\n![秒杀场景下MySQL的低效](https://zhangyaoo.github.io/post-images/1592893242022.png)\r\n图中我们可以看到，线程数在6的时候TPS达到巅峰2W，随着线程数的增长，TPS会随之降低。在高并发场景下，可以根据这个结论来进行优化，比如，当有瞬间大流量冲击数据库时候，我们可以进行数据缓冲，比如用队列削峰，开启6个线程消费，然后访问数据库。\r\n当然这个看业务场景，如果是对同一个资源进行竞争的话，这个证削峰是可行的。但是，如果场景是每一个线程对不同资源进行访问修改时候，不涉及资源竞争的话，那么就不要进行削峰处理，直接访问数据库即可，当然这个也要考虑到MySQL的性能问题。\r\n举个例子，就拿光插入数据的性能测试来说（没有建唯一索引），4核4G的7200转的机械硬盘机器配置，最高能够承受7500的并发插入数。[参考MySQL性能压测]\r\n\r\n\r\n以上算是一种在特定场景下的优化的思路，下面笔者讨论一下日常开发中通用的MySQL优化：\r\n1、避免长期的事务锁占用，避免锁范围过大，避免单个资源的并发竞争\r\n- 首先我们知道数据库Innodb存储引擎的RR和RC隔离级别下，类似update语句，锁的释放时机是在事务提交之后，这个叫做两阶段锁协议。所以为了避免事务之间锁同一行数据出现长时间的互相等待的场景，**要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放**。\r\n举个例子，个人账户A转账给公共账户B，流程是：开启事务——》给 B 的账户余额增加钱；从账户 A 账户余额中扣除钱；记录一条交易日志——》结束事务。因为公共账户B可能被多个线程修改，所以可以优化为：从账户 A 账户余额中扣除钱；记录一条交易日志；给 B 的账户余额增加钱。\r\n-  然后，要尽量将锁细化，一个大锁可以分割为多个锁，类似**分段锁机制**。拿笔者公司业务来说，比如APP上投资某一个产品标（包含了标的开始募集时间、结束时间、可投金额、年利率等等），在到达开始募集时间会有一段时间的高并发投标，这个时候会对具体标的行数据进行频繁的更新操作，就是扣减剩余可投金额，如果其他耗时操作中有对同一资源进行竞争的话，那么产品锁持有时间过长，导致性能低。如果有高并发秒杀下单等动作，会造成行锁抢占问题。\r\n这个时候，优化思路是，将这个产品标在数据库分为10份，每一份的可投金额减少10倍，每一个投标请求进行随机路由分配到这10个小的产品标中。这样就减少锁的并发竞争问题，优化性能。\r\n但是笔者因为遇到这种分段锁的问题导致的**死锁**问题，场景是这样的，当一份投标的金额大于其中一份产品金额的话，会持有这份产品的锁，并且循环获取下一份小产品，这个时候如果有两个线程都大于小产品金额的话，有概率会产生死锁问题，笔者最终通过顺序加锁以及加上锁的过期时间解决了这个问题。\r\n- 最后，对同一个资源的并发竞争，举个例子，像12306抢票、商城活动秒杀等都是对同一个有限资源进行竞争的场景，笔者认为，这种场景是非常难处理的，需要考虑到锁同步数据安全、并发竞争性能瓶颈、超卖等问题，都是会影响C端用户实际的体验的。\r\n  像这种场景，优化的思路就是——>**能用分段锁的就不要用悲观锁，能用乐观锁的就不要用悲观锁，能用无锁编程的就不要用锁，能用异步的场景就不要用同步的场景，能在内存操作的就不要再放到数据库磁盘层面操作**。当然，有些对于数据安全性要求很高的场景，比如金融，加锁是必要的。这个就是业务一致性和并发的折中考虑，这个需要考虑具体的业务场景。\r\n\r\n2、关闭死锁检测\r\nMySQL默认开启死锁检测，概念：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。死锁检测对数据库有非常大的性能影响，会消耗CPU资源，最后会压垮数据库。\r\n在这种并发场景下可以关闭死锁检测功能，会有明显的性能提升。当然关闭死锁检测也会带来问题，比如当死锁发生时，会一直持有锁资源，直至到超时时间后，释放，这段等待的时候可能会造成线程持续等待造成严重后果。所以为了避免死锁的发生，对行资源进行加锁的时候可以根据ID主键等进行**顺序加锁**。\r\n\r\n3、SQL优化\r\n- SQL避免多表连接查询、in和exits合理应用、考虑索引失效场景\r\n- 在经常查询和排序的列上加索引，对离散度不高的不建议加锁，遵循索引规范\r\n- 在写场景多余读场景的索引选择，唯一索引和普通索引的选择\r\n- 尽量进行覆盖索引，避免回表查询\r\n- 尽量建立联合索引，来进行索引复用\r\n- 字符串的前缀索引的建立\r\n- 用explain分析整个SQL的执行情况，包括执行计划、索引分析\r\n- 修改数据比较多的字段场景尽量加索引，尽量使用行锁，避免表锁\r\n\r\n4、在大数据量的情况下（一般单表超2000W）的优化思路：\r\n- 加缓存，对于高并发读场景用缓存，一级缓存Redis或者二级缓存Cache\r\n- 架构层面MySQL就做主从复制或主主复制，读写分离，可以在应用层做，效率高\r\n- 垂直拆分，根据你模块的耦合度，将一个大的系统分为多个小的系统，也就是分布式系统；\r\n- 水平切分，因为水平切分会增加代码开发复杂度，所以能尽量避免就不要做。针对数据量大的表，对于日志流水、配置型等类型数据，进行归档操作；对于状态业务数据进行分库分表，这里就不展开讨论。其次，要选择一个合理的sharding key，为了有好的查询效率，表结构也要改动，做一定的冗余；\r\n\r\n##### Redis\r\nRedis作为开发人员接触最频繁的中间件，首先，笔者先拿出官网给出的Redis性能测试结果：从下图可以得出结论：redis单机测试结果是TPS是7W,QPS只能比这个数据更高。\r\n![](https://zhangyaoo.github.io/post-images/1592983835284.png)\r\n当使用了管道pipline后性能大约提升了6倍，如下图所示\r\n![](https://zhangyaoo.github.io/post-images/1592986207480.png)\r\n\r\n根据官网的文档，影响Redis性能有以下因素，笔者认为开发人员做一些基准测试压测以及日常开发中使用Redis的时候，注意这些优化点，就能高效使用Redis：\r\n1、网络延迟和网络带宽，作为运维人员，最好将服务器和Redis服务部署到同一个局域网内，降低网络延迟。作为开发人员，尽量不要使用大key和大value，因为随着这种数据越来越多，在网络传输的时候会占用大部分网络宽带，举个例子，如果一个redis对象大小超过1KB，当你的QPS达到100万，会把你的千兆路由器的带宽打满，因此网络带宽可能就会成为性能瓶颈。\r\n2、使用pipline，当使用以太网访问Redis时，保据大小保持在以太网数据包大小（约1500字节）以下时，使用流水线进行聚合的命令特别有效。\r\n3、延时删除，当某一个redisObject很大的时候，做删除操作会长时间占有线程持有时间，影响性能，redis新版本有延迟删除的功能。\r\n4、使用scan代替keys，keys会造成严重的性能问题\r\n5、设置内存的大小阈值并且设置好内存缓存淘汰的策略，线上设置LRU策略来淘汰缓存这样做是为了避免物理内存使用完后，造成卡顿的情况。并且线上要避免大量key同时失效的场景，因为redis删除失效的key是循环删除的，并且频繁的删除会促使内存管理器回收内存页，这样也会导致卡顿的现象。\r\n6、connection客户端连接数量，Redis作为一个事件驱动模型，因为base epoll能够实现O(1)时间复杂度的响应操作，因此能够提供很好性能。Redis已经以超过60000个连接为基准，并且在这些条件下仍能够维持50000 q / s的吞吐量，而且具有30000个连接的实例只能处理100个连接可达到的吞吐量的一半，可参考下图（来源官网）：\r\n![](https://zhangyaoo.github.io/post-images/1592991673063.png)\r\n\r\n##### ElasticSearch\r\nElasticSearch可以解决大数据量下的搜索慢问题，这里笔者就拿 死磕ElasticSearch社区作者的优化建议，给出几点在日常开发ElasticSearch的优化方案：\r\n1、尽量将所有数据的一半都缓存在内存当中file cache system 当中\r\n2、将少量（查询字段比较频繁）字段放入ES，其他全量字段放入Hbase中，采用ES + Hbase方式提升查询效率，节省ES存储空间，file cache system的数据就会存的更多\r\n3、缓存预热，可以做一个缓存预热系统，定时查询热点数据将其缓存在filesystem cache 中\r\n4、冷热分离，将访问量高的和冷数据分别放置索引\r\n5、ES ducoment设计，尽量避免连接、父子文档等连接操作，将数据准备好后再存入ES\r\n6、不允许深度分页，页数越大，深度越深，从每一个shard返回的数据就越多，耗时越久。可以通过scroll api游标进行查询。\r\n7、必须限制模糊搜索的长度，不然CPU会飙高，可参考 https://elasticsearch.cn/article/171\r\n\r\n###  3、业务层方面\r\n每个公司业务层面优化不相同，要根据具体业务场景去优化，别人的方案只能作为参考。\r\n这里笔者就拿金融行业背景下，列举三个优化例子。\r\n1、背景：企业借贷，会从用户的投的银行某个产品的资金池中匹配查找合适的资金，然后进行资金占有，银行真实转账后，生成终态的债权关系。\r\n优化之前：使用同步锁，同一时间只能又一个线程去资金池中匹配资金，这种方案有严重的性能问题，其他线程没有拿到锁之前只能自旋尝试获取锁，损耗CPU资源。\r\n优化之后：去掉同步锁，改成乐观锁，放到数据库做，资金表的字段增加一个标识表示是否占用，线程进来尝试匹配资金，乐观锁去预占资金表，成功表示匹配成功。这里要注意的是，尽量一个借贷匹配一比资金，这样资金池里面的资金锁行范围会减少（因为有多线程抢占资金资源），资金匹配的速度会加快，并且这样优化这样银行转账的次数会减少（如果匹配一批资金就要进行相同数量转账次数），防止多个投资人账户进行银行转账，减少整个借款业务线的耗时，避免其中一个转账出错导致全部要回滚这样的情况。\r\n这里其实还可以进行优化，比如一笔一笔的占有资金，占有失败的continue继续下一笔资金含有，不用一次在一个事务里面占有大量资金，防止大事务执行失败以及出现其他会有死锁的可能性。这里优化的思想就是大事务拆成小事务，防止事务执行失败的概率。\r\n\r\n2、背景：企业借贷，同步请求转异步\r\n优化之前，三方企业借贷请求，是同步调用，因为一条完整的借贷业务线非常长，中间会RPC调用非常多的底层服务以及其他远程接口，这样的话请求到响应时间会拉的非常长，影响C端的用户体验。\r\n优化之后，同步改异步，具体做法是，借贷请求进入系统后，会先生成一个进行中的状态借贷数据插入数据库，然后将唯一标识丢入MQ中，然后就返回成功。这样吞吐量会增加，用户端体验会非常好。\r\n当然如果说要保证高可用，可以利用MQ的事务消息做，利用二阶段提交方式保证MQ能够收到消息。具体方案可以看笔者的这篇文章 [本地事务消息投递一致性](https://zhangyaoo.github.io/post/jie-jue-bing-fa-xia-ben-di-shi-wu-he-xiao-xi-tou-di-yi-zhi-xing/)\r\n\r\n3、背景：C端用户在APP上，某一个标开启募集资金后进行投标，这里的标类似支付宝的理财产品，开始募集的时候会有高并发流量涌入，当APP端用户同时投标，会有大量请求，这就形成了抢购的动作，因为一个产品标的可投金额是有限的，只有少数人能投标成功\r\n优化之前：笔者在上文中提到的，尽管说频繁将更新行锁的数据放到事务的最后， 会有性能提升，但是随着并发数增长，MySQL也会成为性能瓶颈。\r\n优化之后：利用redis的纯内存操作高性能的优点，将产品的可投金额放入缓存redis（这里redis里面的金额比数据库中少保证不超卖），利用redis的decrby命令或者lua脚本，保证产品标剩余可投金额能够进行原子减少，每一次减少成功后，将用户这一次投标的数据丢入MQ中异步处理，消费端做的就是将插入预状态的借款数据、冻结用户金额和减少产品的可投金额放入同一个事务中处理。\r\n上面做的优化能够保证C端用户的良好体验，但是引入各种中间件的话会出现各种问题需要去解决，比如重复投标怎么办，Redis挂了怎么？MQ挂了怎么办？消息丢失怎么办？等一系列问题。\r\n重复投标，可以利用用户标识的唯一token做，短信生成token，设置token失效时间（短信失效时间60s），投标时候校验token是否过期和使用过。\r\nRedis挂，这时候就要考虑持久化和集群哨兵保持redis高可用。\r\nMQ挂了，消息丢失，重复消费等，这时候就要考虑broker的持久化，生产端和消费端的重试机制和ack机制。\r\n以上需要开发人员去应对每一个可能出现问题的场景。\r\n\r\n## 三、后续流量增长系统性能优化思路\r\n当流量激增的时候，首先要考虑到系统的稳定性和高可用，后续针对特定的场景，分析性能瓶颈，然后再去做并发的优化。这里笔者就**简单的**列举一下业界的做法，下面每一条读者都可以自行扩展大篇幅深入去了解。\r\n#### 高可用\r\n1. 使用反向代理和**负载均衡**实现分流，并且实现动态切换主备机器， 网关负载均衡，DNS多机房负载均衡\r\n2. 通过**限流**保护应用免受雪崩之灾\r\n3. 通过**降级**实现核心服务服务可用，牺牲非核心服务\r\n4. 通过**隔离**实现故障隔离和资源隔离，比如线程隔离，对方法或者类具体分配线程数量，防止相互影响\r\n5. 通过设置合理的**超时**调用与重试机制避免请求堆积造成雪崩\r\n6. 通过**回滚**机制快速修复错误版本\r\n7. Redis**集群**保证高可用，**哨兵**模式保证故障转移\r\n8. Redis MQ消息中间件开启**持久化**，保证数据不丢；**ack机制**和**重试机制**保证数据的可靠性\r\n9.  分布式服务环境**链路跟踪**，监控整个服务的服务质量\r\n10. 硬件资源**监控**、CPU、内存、负载、IO、堆内存、JVM GC、线程池以及各种中间件监控等等\r\n\r\n\r\n#### 高并发\r\n1. 利用MQ同步转异步，流量削峰，多线程异步消费\r\n2. 读场景比较多的接口可以利用缓存Redis，包括热点key缓存预热，多级缓存，比如分布式缓存，本地缓存和CDN缓存。还可以做集群、哨兵、高可用保证Redis性能\r\n3. 对于强一致的同步下单场景，可以将对MySQL的操作改为Redis，然后利用MQ做异步\r\n4. 优化JVM，包括新生代和老年代的大小、GC算法的选择等，尽可能减少GC频率和耗时\r\n5. 非核心业务逻辑、延迟任务逻辑、三方调用逻辑，可以做异步\r\n6. 对于架构方面，可以做负载均衡集群部署，MySQL主从、分库分表或者归档、Redis集群、多级缓存、分布式垂直拆分部署、搜索场景引入ES等多个方面考虑\r\n7. 对于程序方面，可以从For循环的计算逻辑优化、批处理机制减少IO、采用时间复杂度更小的数据结构和算法、乐观锁和分段锁和无锁编程减少锁冲突等方面考虑\r\n\r\n## 四、总结\r\n以上，笔者从硬件层、代码层、中间件层、业务层等不同方向，简单的分析了影响系统性能各个因素，以及提供了简单的优化的思路和例子。因笔者工作经验能力有限，无法做到全面的分析，还望读者能够指正错误以及提供建议。\r\n\r\n\r\n## 参考\r\n\r\n1、秒杀场景下MySQL的低效——丁奇\r\n2、死磕ElasticSearch社区——ElasticSearch优化\r\n3、MySQL性能压测——https://my.oschina.net/u/867417/blog/758690\r\n4、高可用系统方案——https://blog.csdn.net/hustspy1990/article/details/78008324\r\n5、Redis性能测试——https://redis.io/topics/benchmarks\r\n\r\n<!--参考 -->\r\n[comment]: <> (6、彻底理解高并发—https://mp.weixin.qq.com/s?__biz=MzU2MTM4NDAwMw==&mid=2247484105&idx=1&sn=de4c763482aa65383dab59b221800cb5&chksm=fc78dde5cb0f54f39e1f278249d236ff2400330be573405435dba458404a5f771715319d694c&mpshare=1&scene=23&srcid=&sharer_sharetime=1593228785481&sharer_shareid=48702c70183b62662ee3edd289996b47#rd) ",
      "data": {
        "title": "系统性能优化的思考和总结",
        "date": "2020-06-17 21:05:11",
        "tags": [
          "性能调优"
        ],
        "published": true,
        "hideInList": false,
        "feature": "https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1592810879330&di=84a8094e31dabae6a1cbe120e32baa9e&imgtype=0&src=http%3A%2F%2Fpcs4.clubstatic.lenovo.com.cn%2Fdata%2Fattachment%2Fforum%2F201610%2F05%2F151814x05lyhh1x0w8519w.jpg",
        "isTop": true
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "guan-yu-xi-tong-xing-neng-ping-jing-yu-ce-he-xi-tong-xing-neng-you-hua"
    },
    {
      "content": "### 前言\r\n> 笔者先从linkedHashMap源码中借鉴插入顺序访问的代码，然后然后自己实现了一个LRU\r\n### linkedHashMap底层的数据结构\r\nlinkedHashMap底层结构（顺序访问）：\r\n* 1、linkedHashMap维护了每个node的双向链表，初始化时候维护了空的entry header头，新加入的节点放到entry的头部header的next\r\n* 2、put还是get都会进行重排序，get entry1 还是put entry1都会先把Entry1从双向链表中删除，然后再把Entry1加入到双向链表的表尾。\r\n* 3、遍历访问的时候，会访问header的下一个next节点，这就形成了顺序访问\r\n\r\n![](https://zhangyaoo.github.io/post-images/1592968145044.png)\r\n\r\n\r\n### 链表实现\r\n实现思路：\r\n * 1、数据是直接利用 HashMap 来存放的。\r\n * 2、内部使用了一个双向链表来存放数据，所以有一个头结点 header，以及尾结点 tailer。\r\n * 3、每次写入头结点，删除尾结点时都是依赖于 header tailer\r\n![](https://zhangyaoo.github.io/post-images/1592220507945.png)\r\n```\r\nimport com.google.common.collect.Maps;\r\nimport java.util.Map;\r\n\r\n/**\r\n * 线程不安全，同步机制自行控制。\r\n */\r\npublic class LRUCacheV2 {\r\n    /**\r\n     * 缓存map\r\n     */\r\n    private final Map<String, Node> cacheMap;\r\n\r\n    /**\r\n     * 头指针\r\n     */\r\n    private Node head;\r\n\r\n    /**\r\n     * 尾指针\r\n     */\r\n    private Node tail;\r\n\r\n    /**\r\n     * 容量\r\n     */\r\n    private final int cacheSize;\r\n\r\n    /**\r\n     * 当前容量\r\n     */\r\n    private int currentCacheSize;\r\n\r\n    LRUCacheV2(int capacity){\r\n        cacheMap = Maps.newHashMapWithExpectedSize(capacity);\r\n        cacheSize = capacity;\r\n        currentCacheSize = 0;\r\n    }\r\n\r\n    public Object get(String key){\r\n        Node node = cacheMap.get(key);\r\n        if(node != null){\r\n            // 移动到头指针\r\n            move2head(node);\r\n            return node.getData();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void remove(String key){\r\n        Node node = cacheMap.get(key);\r\n        if(node != null){\r\n            Node pre = node.getPre();\r\n            Node next = node.getNext();\r\n            if(pre != null){\r\n                pre.setNext(next);\r\n            }\r\n            if(next != null){\r\n                next.setPre(pre);\r\n            }\r\n\r\n            // 如果删除刚好是头节点或者尾节点，也要移动指针\r\n            if(node.getKey().equals(head.getKey())){\r\n                head = pre;\r\n            }\r\n            if(node.getKey().equals(tail.getKey())){\r\n                tail = next;\r\n            }\r\n\r\n            cacheMap.remove(key);\r\n        }\r\n    }\r\n\r\n    public void put(String key, Object value){\r\n        Node node = cacheMap.get(key);\r\n        if(node != null){\r\n            // 存在节点的话，就覆盖，并且放到头\r\n            node.setData(value);\r\n            move2head(node);\r\n            cacheMap.put(key, node);\r\n        }else {\r\n            // 不存在节点，构造并且放到头\r\n            if(currentCacheSize == cacheSize){\r\n                // 删除尾node\r\n                String delKey = tail.getKey();\r\n                cacheMap.remove(delKey);\r\n\r\n                // 尾指针移动\r\n                Node next = tail.getNext();\r\n                if(next != null){\r\n                    next.setPre(null);\r\n                }\r\n                tail.setNext(null);\r\n                tail = next;\r\n\r\n            }else{\r\n                currentCacheSize++;\r\n            }\r\n            node = new Node();\r\n            node.setData(value);\r\n            node.setKey(key);\r\n            // 头指针移动\r\n            move2head(node);\r\n        }\r\n        cacheMap.put(key, node);\r\n    }\r\n\r\n    /**\r\n     * 节点移到头\r\n     */\r\n    private void move2head(Node node){\r\n        if(head == null){\r\n            // 初始化head 和 tail\r\n            head = node;\r\n            head.setNext(null);\r\n            head.setPre(null);\r\n            tail = node;\r\n        }else {\r\n            // 如果是相同的Key，啥都不用动，node就是最新的头\r\n            if(node.getKey().equals(head.getKey())){\r\n                return;\r\n            }\r\n\r\n            // 截取node\r\n            Node pre = node.getPre();\r\n            Node next = node.getNext();\r\n            if(pre != null){\r\n                pre.setNext(next);\r\n            }\r\n            if(next != null){\r\n                next.setPre(pre);\r\n            }\r\n\r\n            // 如果要截取的节点是尾节点，那么尾节点指针也要向前移动\r\n            if(node.getKey().equals(tail.getKey())){\r\n                tail = next;\r\n            }\r\n\r\n            // 放在头前面\r\n            head.setNext(node);\r\n            node.setPre(head);\r\n            // node下个指针指向null\r\n            node.setNext(null);\r\n            head = node;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        StringBuilder sb = new StringBuilder() ;\r\n        Node node = head;\r\n        while (node != null){\r\n            sb.append(node.getKey()).append(\":\")\r\n                    .append(node.getData())\r\n                    .append(\"-->\") ;\r\n            node = node.getPre();\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        LRUCacheV2 lruCacheV2 = new LRUCacheV2(4);\r\n        lruCacheV2.put(\"1\",\"1\");\r\n        lruCacheV2.put(\"2\",\"2\");\r\n        lruCacheV2.put(\"3\",\"3\");\r\n        lruCacheV2.put(\"4\",\"4\");\r\n        lruCacheV2.put(\"5\",\"5\");\r\n        //lruCacheV2.get(\"2\");\r\n        //lruCacheV2.put(\"2\",\"22\");\r\n        lruCacheV2.remove(\"5\");\r\n        System.out.println(lruCacheV2.toString());\r\n    }\r\n}\r\n```\r\n参考：\r\n1、https://www.iteye.com/blog/gogole-692103\r\n2、https://crossoverjie.top/2018/04/07/algorithm/LRU-cache/\r\n",
      "data": {
        "title": "O(1)时间复杂度下，双向链表实现LRU",
        "date": "2020-06-15 19:17:45",
        "tags": [
          "Java基础"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/o1shi-jian-fu-za-du-xia-shuang-xiang-lian-biao-shi-xian-lru.jfif",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "o1shi-jian-fu-za-du-xia-shuang-xiang-lian-biao-shi-xian-lru"
    },
    {
      "content": "\r\n\r\n\r\n小提示：阅读此篇文章大约需要三分钟时间，以下都是个人一些生活工作上碎碎念念，唠叨碎语，请斟酌阅读~     \r\n\r\n\r\n\r\n目录\r\n开头\r\n学习\r\n工作\r\n运动\r\n生活\r\n游戏\r\n美食\r\n亲情\r\n爱情\r\n2020flag\r\n\r\n\r\n————————我是分割线——————\r\n\r\n开头\r\n又过了一年，记得上一次写年终总结还是在我狗窝(出租房)里面写的，这一次是在南京南站开始写的。\r\n深圳的天气就是这么神奇，一年到头穿短袖，曾和我朋友立下一个flag，说在深圳365天300天穿短袖，不然就洗一个月碗，似乎今年温度降的早，早早就穿上了短袖，(flag果然对于我来说就是打脸的)，所以明年来就给自己装逼行为付出代价（╯' - ')╯︵ ┻━┻ \r\n这里一直都是夏天，不能像家乡一样能感受到四季的变化，感觉时间过的特别快，有一次在公司敲代码时候，听到了鸟鸣声，瞬间就想起了家乡田野中的鸟叫虫鸣，脑海里就浮现了那年夏天，吃着冰棍，听着蝉鸣的旧时光。\r\n这一年有许多值得写的东西，生活中的各个方面都有。用我老爹一句话，一年时间不管是进步多少，只要不是原地踏步走就可以。这次还是像2018年总结一样给自各做一些总结和一些（给自己打脸的）flag\r\n\r\n\r\n\r\n\r\n学习\r\n说起学习，这里放在最开始写，自认为学习是自己提升自己的最直接最有效的方式。从小学到高中以至于大学的知识，都是皮毛。重要是培养了快速学习能力和自学的习惯，这个可以说是自各学业生涯中获得最有价值的东西了。但是这是不够的，对于生活中认知和工作的方面，自我独立思考也是必不可少的。自各也在特意去注重，培养自各的独立思考的能力。\r\n在这感谢云智惠IPO所有后台同学，以及@陈秦圆 同学，让自己认识到独立思考和团队合作的重要性。\r\n\r\n这一年有学习到东西有：\r\n极客时间的数据结构和算法之美\r\n设计模式之美(只看了一章)\r\n牛客网的剑指offer(只刷了30道)\r\n力扣leetcode(只刷了60道)\r\n《netty实战》\r\n搭建开源项目fast-im脚手架\r\n金融业务知识\r\n沈剑的架构师之路（只看了二十篇）\r\n\r\n来年目标：\r\n继续完成开源项目\r\n经营好个人博客\r\n架构师之路学习\r\n《redis进阶》\r\n《剑指offer》\r\n大数据相关知识\r\n\r\n看了其他书籍：\r\n《亮剑》\r\n《寻路中国》\r\n\r\n画外音：一年时间学的这么少，还贴出来（脸皮有点厚😂，手动狗头）\r\n\r\n\r\n\r\n\r\n\r\n\r\n工作\r\n在云智惠的一年半时间里，自各学习了许多和工作相关的知识，认识了许多优秀的同学，成长了并且收获了许多，感谢云智惠提供的职场平台。虽然现在已经快要解散了，但是还是表示衷心感谢。江湖再见！\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n运动\r\n唯一一个在2019年立得没有被打脸的flag，就是运动。每周一次篮球或者跑步。\r\n跑步呢，一般跑个4公里一次。大概跑了二十次，100公里左右，这里只记录了一半，另外一半没有记录（这句是真的）「哭笑:-D」\r\n\r\n\r\n\r\n\r\n篮球呢，现在投篮不准，运球辣眼睛，已然一副老年篮球的样子。但是还是阻挡不了我喜欢这一项运动，就像灌篮高手动漫中一句话“教练，我想打篮球”这样，源自于内心的热爱。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n生活\r\n这一年我想了很久，得到了什么失去了什么。。我想了很久，突然想起来，\r\n得到的当然是肚子的肥肉赘肉咯，，失去的你们也知道，肯定是我稀薄的头发。。\r\n\r\n\r\n当自各发际线越来越高的时候，就在思考人生，为什么长得这么帅，到要掉头发\r\n\r\n\r\n从此菊花茶➕枸杞已是标配，早睡早起已是人生箴言😂，狗命要紧\r\n\r\n\r\n\r\n\r\n游戏\r\n平常鸭梨大时候偶尔打打游戏放松放松，\r\n今年凭借自己的天赋(装一下B)和不懈努力，打到白金一。离自己的小目标又近了一步，争取今年上砖石，让我当个砖石守门员也行🤐。\r\n\r\n\r\n在这写上最喜欢英雄皇子的台词：“所到之处，无人能挡！”\r\n\r\n\r\n\r\n\r\n美食\r\n\r\n什么最重要，当然是吃。\r\n想想这一年做的美食，和同学一起做的，此处@肉和杨丽丽，感谢一起相处一年，学到了很多美食是如何做的，我身边的隐藏大厨😂。\r\n今年学到了有红烧鲫鱼，糖醋排骨，葱花饼，可乐鸡翅，红烧肉，自制凉菜，水煮肉片，自制烤鱼，回锅肉等等等等，就放一张和同学一起做饺子的图片，不多放了，免得晚上中毒太深。。。\r\n\r\n\r\n画外音：上面饺子（看起来像）真的不是我包的\r\n\r\n\r\n\r\n亲情\r\n特别喜欢《请回答1988》里面家庭亲情，整部片虽然不乏爱情友情等，但是我觉得核心是亲情，最有印象还是宝拉妈妈下雨天护着宝拉那段。\"人真正变强大，不是因为守护着自尊心，而是抛开自尊心的时候，因为有需要守护的人\"\r\n这句话还是需要自己去经历体会的。\r\n以前觉得，出省上学，出省工作，可以离家人远一点，就像是春天的燕子，长大了都想看看外面的世界，去闯荡去经历，去丰富自己的生活增长自己见识。可到了一定的年龄或者认知，会意识到，有家人在的地方，都觉得很知足。特别喜欢《四个春天》纪录片里面燕子归来之时，那种感觉，纪录片中父母看到燕子归来，心里念叨着，咱家小燕子也该回家了。\r\n\r\n\r\n\r\n\r\n\r\n\r\n爱情\r\n感谢党感谢国家给我发了一个女朋友，免费滴。<( ˘ ³˘)/💯\r\n今年最大收货，当然是遇到方小皮同学啦，（默默撒一下新鲜狗粮）希望在以后的日子里，你能够早睡早起，吃好喝好，身体棒棒。\r\n\r\n\r\n\r\n\r\n\r\n\r\n最后肯定是写一些打脸的东西。。\r\n2020年flag\r\n  自信\r\n  一周一次跑步或者篮球\r\n  看完剩余书籍\r\n  经营好个人博客\r\n  洗脚城洗一次脚(有什么东西渗入进来了)\r\n  体重不超130\r\n  早睡早起，11点之前睡（虽然是不可能的）\r\n  学习大数据相关知识\r\n  保护眼睛\r\n\r\n以上，完\r\n\r\n![](https://zhangyaoo.github.io/post-images/1593268924481.jpg)\r\n最后贴上自各最喜欢的照片，2015年于西藏拍\r\n\r\n",
      "data": {
        "title": "2019年总结",
        "date": "2020-01-01 22:39:54",
        "tags": [
          "总结"
        ],
        "published": true,
        "hideInList": true,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "2019-nian-zong-jie"
    },
    {
      "content": "> 欢迎来到我的小站呀，很高兴遇见你！🤝\r\n\r\n## 🏠 关于本站\r\n一些技术博客和一些闲言碎语\r\n## 👨‍💻 博主是谁\r\n还在打怪升级的菜鸟\r\n## ⛹ 兴趣爱好\r\n二次元、骑行、篮球、LOL、编码\r\n## 📬 联系我呀\r\nQQ：1124826889\r\n",
      "data": {
        "title": "关于",
        "date": "2019-01-25 19:09:48",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "about"
    },
    {
      "content": "## 写给自己的2018年总结\r\n## 题记\r\n![](https://img-blog.csdnimg.cn/20181231115831927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p5MTUxMTIzNDI0NDk=,size_16,color_FFFFFF,t_70)\r\n   不觉中，2018年就快过了，在这之前从来没有写过一些总结性的文章，从小学初中日志作业，到高中的日复一夜的学习再到大学的浑浑噩噩的僵硬式的学习，一直都在进行流水账式的学习输入，从没有写过关于一年的计划甚至是一个月的小目标。\r\n   \r\n   至于为什么要做这个总结，我想是因为，年复一年的度过，有时候自己都不知道在这一年干过什么事情、收获了什么和失去了什么，包括对友情、亲情和事业等等。是因为我记性太差，还是说在这个娱乐信息爆炸的时代，我注意力都集中在快餐式的的认知上，很难有精力或者集中注意力去汲取自己想要的高质量的信息上，不得而知。所以今年我觉得有必要去总结自己的这一年。\r\n\r\n总结目录：\r\n 1. 关于技术\r\n 2. 关于认知\r\n 3. 关于为人处事\r\n 4. 关于友情爱情亲情\r\n 5. 2019展望\r\n\r\n\r\n\r\n\r\n## 1、关于技术\r\n\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181231120336118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p5MTUxMTIzNDI0NDk=,size_16,color_FFFFFF,t_70)\r\n1、技术积累\r\n    师范专业毕业的我从大三开始接触计算机，大三那年学的网络工程，还考了个CCNA，目前发现没有什么用，对于现在的我来说。然后被住在上铺的兄弟67代入坑里学习code搬砖，从那开始便一发不可收拾，埋头苦学，连教师资格证都不考，跑出去公司里面当小弟实习。至此就开始技术积累之路了。\r\n \r\n 当小弟那一段时间，就像刚萌发的种子一样疯狂吸收营养，学些了python爬虫、python web开发、Java公众号开发，SSM Java全家桶开发。这些都是在学校学不到的东西，当时感觉自己很牛逼，直到毕业找工作。\r\n\r\n毕业那一刻起，因为技术发展瓶颈，我又背上行囊横跨大半个中国从山东去南方一线城市漂。拿这自以为高大上的简历去投递，然后面试，惨遭面试官的啪啪打脸，连一个hashmap的底层原理都不知道，最有印象的是Java 循环删除list怎么删除，回答完后别面试官一脸嫌弃-。-\r\n\r\n**只会拿着现成的框架和应用去用，而不知道底层的实现方式和原理，那么工作性质就和网管差不多**。\r\n不会举一反三，如果又有新的框架出来又必须要学习一遍，如果说掌握了底层工作原理，那么用起来会舒服很多。\r\n\r\n\r\n\r\n2、技术分享\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181231124820725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p5MTUxMTIzNDI0NDk=,size_16,color_FFFFFF,t_70)\r\n**分享的乐趣，从一开始就停不下来。**\r\n公司会周期性的选一些当下热门的技术让我们去研究，然后去把自己研究的内容分享出来。我认为这是非常棒的一种学习方式。为什么这么说。因为这个是非常具体挑战性的，你理解了是一个层次，如果说要给别人将明白又是另外一个层次，这是两个不同层次的概念。如果说你的语言表达性不行，那么这个就是更加难上加难了。\r\n\r\n分享的乐趣不仅是这个，当你给别人讲完后，你还可以通过别人提供的问题和建议方案，和你自己的理解进行碰撞，然后产生新的认知元素，到下一次分享就可以融入上次分享的认知进来。\r\n\r\n到现在为止，我还在想，怎么在给别人讲解分享的时候能够更能让别人听懂，而且愿意去听。我最怕还是在分享的时候别人在玩手机。因为有了这个现象就表明你的分享做的不够好。\r\n\r\n3、书籍\r\n**在这个手机万能的时代，能够静下心来看完一本书并理解是非常不容易的**。\r\n或许你们都说哪有时间看书，都忙工作任务了，甚至有时候我自己都不敢说一个月看完一本书，不管是文学还是专业技术性书籍。\r\n\r\n今年，我看了以下几本书，有的只看了一本书中的一部分，大部分都是涉及专业技术的：Netty权威指南、深入理解Java多线程、JavaEE互联网轻量级技术整合开发、Java高并发程序设计。还有其他的一些非技术书就不一一列举了。一年才看这几本书真是有点丢人-。-\r\n\r\n自认为网络技术博客和纸质书还是有各有各自的存在的意义的。就拿纸质书来说，它能够通过一系列的目录，能够从基本来源、基本原理、使用场景、底层原理技术、工作应用场景来一一进行有顺序的给人以真正理解和掌握。不需要自己从网上搜分散的知识点。\r\n\r\n**不是看完书后就完了，还需要自己通过实践去证明你自己的理解是否正确**，这也是个不可欠缺的过程。\r\n\r\n为什么还需要读书呢，我认为网上一句话还是不错的，是《物演通论》作者王东岳说的：“因为通过电视或者其他方式搜集的信息，即那种通过直观方式接受的知识，是最浅显、最粗疏且没有经过精密逻辑证明的东西”。\r\n\r\n4、思考\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181231141547586.png)\r\n关于程序员技术深度和广度的选择，也是从网上看的一句话，Oracle技术大牛杨晓峰指出：“**技术人免不了要构建广泛的知识体系，但终究还是要克制住诱惑，将某个领域做到精深**。水桶的水量取决于最短板，但是大多数情况下，我们在工作中的回报，更多的源自于自身的长处，甚至某种程度上还决定了我们是拥有自己选择的自由，还是疲于奔命，必经我们每个人的体力、经历有现实的上限的”。\r\n自认为还是很有道理的，先建立自己广度网，然后专门找一项自己喜欢的方向，然后放开手脚去研究。至少要有一个非常深的领域知识，所谓知识体系的搭建是基于多个扎实的知识点汇集而成，点不扎实不深入。\r\n\r\n\r\n\r\n## 2、关于认知\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181231154812245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p5MTUxMTIzNDI0NDk=,size_16,color_FFFFFF,t_70)\r\n1、**人与人最大的不同：认知不同**\r\n我认为的成长就是认知成长，是对一间事物的理解和处理方法。由于每个人的出生家境不同，生活环境不同，也就影响了每个人的认知，所以人才会有各自的想法，做事准则和处世方式。\r\n\r\n2、**不断学习，使自己更值钱。**\r\n都说2018年是互联网寒冬，但是对我们技术人来说，难以构成影响，因为只要你有足够的技术底子，在哪都可以养活自己。用我们家乡话来说，”学好技术，走到天下都不怕“，这里我私自把物理化改成技术，哈哈。\r\n经常都能在网上看到一句话，”**人生最重要的投资是自己。使自己更值钱才是立身之本。**“\r\n\r\n3、**高质量的输入重要，输出比输入更重要**\r\n就拿看书写文章来说，当我们要写类似高考那种作文题目时候，如果这时读武侠小说，那么肯定是对于写作文是无益的，这就是低质量的输入，如果看一些文学方面的书的话，那么对于写作是非常有好处的。\r\n但是一味的输入，提升的意义不高，个人观点。比如我从小学到大，到现在都没写过文章的话，以前在高中学习的写文章的能力都没有了。所以如果不去输出，那么学习到的东西将在以后某个时刻都会忘记。\r\n\r\n## 3、关于为人处事\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181231150512794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p5MTUxMTIzNDI0NDk=,size_16,color_FFFFFF,t_70)\r\n我这举两个例子：\r\n例1：上学那会，我爸送我去火车站，到了马路上准备叫出租车。这时对面马路上来了一辆空车，司机师傅看到我们招手，就准备到不远处掉头，然后这时候另外一辆出租车就刚好停在我们面前，我准备上眼前这辆车的时候，我爸就把我拉住叫我等之前那一辆车掉头坐那辆车，而且那辆车已经拐弯马上到我们这边来了。之后结果就是，我和我爸坐上了之前一辆车，而且和停在我们面前的后一辆车师傅说“不好意思我们已经叫了马路对面那一辆车了“。\r\n\r\n这件事到现在我还有记忆深刻，这里我想说的是，**我们在方便自己的同时，也要换位思考考虑别人的感受**。\r\n或许对于你来说是一件小事情，直接图方便坐上离自己最近的车。那也无可厚非，换作以前的我也是，没有换位思考过。但是现在我觉得换位思考也是一个成年人应具备的素质。\r\n\r\n\r\n例2：上一次公司技术联调，我这边需要远程和另一个分公司同事联调，我这边完事后需要通知他那边，他那边才能继续完成工作，由于自己的原因，这边做完，没有及时通知到他们，导致他们那边延期。\r\n\r\n这件事我想说的是，**我们在做事的时候，无论是工作还是生活，都不能去因为自己耽搁别人**，因为别人的时间也是时间，和我们自己是一样的。\r\n\r\n## 4、关于友情爱情亲情\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181231151002819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p5MTUxMTIzNDI0NDk=,size_16,color_FFFFFF,t_70)\r\n关于友情：想对远方的朋友说 **当你辉煌时候，我祝贺你，当你落魄的时候，我随时帮助你**。\r\n\r\n关于爱情：到现在我还在想自己真正想去拥有的是什么。\r\n\r\n关于亲情：只有别人关心你飞的高不高，没有人会关心你飞的累不累，除了家人。\r\n\r\n## 5、2019年展望\r\n立个flag，毕竟是未来的事\r\n1、一周一次跑步+篮球\r\n2、两个月至少看完一本书\r\n3、保护好视力\r\n4、熟悉金融核心业务\r\n5、体重不超140\r\n\r\n## 总结一下\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181231162952878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p5MTUxMTIzNDI0NDk=,size_16,color_FFFFFF,t_70)\r\n人的成长是不断认识到以前的自己是一个傻X的过程，希望明年的我认为今年的我是一个傻X。\r\n\r\n\r\n *2018-12-31 于张遥出租屋写*\r\n\r\n\r\n",
      "data": {
        "title": "2018年总结",
        "date": "2019-01-01 22:39:13",
        "tags": [
          "总结"
        ],
        "published": true,
        "hideInList": true,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "2018-nian-zong-jie"
    }
  ],
  "tags": [
    {
      "name": "SaaS",
      "slug": "I6yTIXFi2",
      "used": true
    },
    {
      "name": "MySQL",
      "slug": "UdV_NEw8b",
      "used": true
    },
    {
      "name": "总结",
      "slug": "hD1pMQ2Ri",
      "used": true
    },
    {
      "name": "分布式事务",
      "slug": "3TlXXSVtT",
      "used": true
    },
    {
      "name": "Zookeeper",
      "slug": "NpHzdYvCv",
      "used": true
    },
    {
      "name": "数据结构和算法",
      "slug": "rpzuYyqo0",
      "used": true
    },
    {
      "name": "性能调优",
      "slug": "JdNwgUpVz",
      "used": true
    },
    {
      "index": -1,
      "name": "Java基础",
      "slug": "bsWdIaAdo",
      "used": true
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "首页",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "归档",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "标签",
      "openType": "Internal"
    },
    {
      "link": "/post/about",
      "name": "关于",
      "openType": "Internal"
    }
  ]
}